
if has('nvim') 
  color m2 " nvim-qt font setting is inside ginit.vim
else  "gvim
  source $VIMRUNTIME/defaults.vim | let g:skip_defaults_vim = 1 " Do not source defaults.vim again (after loading this system vimrc)
  if has('gui_running') 
	set lines=36 columns=144 | set guifont =Jetbrains_Mono:h13:cANSI:qDRAFT | colorscheme m2 "screen size and color scheme
	" set renderoptions=type:directx,contrast:0.5,geom:1,renmode:5                               " looks good on win10
  elseif has('vcon') "win10, vim-console
	set termguicolors| set background=dark| colorscheme southernlights
  endif 
endif

set backup                                                     " keep a backup file (restore to previous version)
if has('persistent_undo')| set undofile | endif                " keep an undo file (undo changes after closing)
if &t_Co > 2 || has('gui_running') | set hlsearch | endif      " highligh last used search pattern (t_Co:term_number_of_color)

let g:python3_host_prog='C:/Python38-32/python.exe'
let g:python_host_prog='C:/python27/python.exe'
let g:perl_host_prog = 'f:/perl/bin/perl.exe'
" let Tlist_Ctags_Cmd = 'f:/gnuWin32/bin/ctags.exe'              " ctags for Taglist

set relativenumber | set number | set ignorecase | set smartcase | set tabstop=4 | set nowrap
set helplang=en | set langmenu=en_US.UTF-8 |set encoding=UTF-8 " sets the language of the menu (gvim)
set laststatus=2                                               " make the status two lines deep so you can see status always
set wildmode=longest,list,full | set wildmenu                  " bash/readline -alike tab-completion

" highlight current line
set cursorline										           
" Default Colors for CursorLine
highlight CursorLine guibg=Grey88
" Change Color when entering Insert Mode
autocmd InsertEnter * highlight  CursorLine guibg=LightBlue
" Revert Color to default when leaving Insert Mode
autocmd InsertLeave * highlight  CursorLine guibg=Grey88


au FileType text setlocal textwidth=120
au Filetype vim         setlocal tabstop=2 sts=2 sw=2	
au Filetype c,cpp,st    setlocal tabstop=4 sts=4 sw=4	
au filetype lisp,scheme setlocal equalprg=scmindent.cmd
au BufNewFile, BufReadPost *.rkt,*.rktl,*.alt,*.scm set filetype=scheme "racket
au BufNewFile, BufReadPost *.dom set filetype=st

"shift-insert to past in edit mode, use <silent> for not echoing
inoremap <silent>  <S-Insert>  <C-R>+
"alt-space to close vim
nnoremap <M-Space> :simalt ~<CR> 
"no need to press shift+:
nnoremap ; :
"swap ' " in normal mode
nnoremap ' "
nnoremap " '
" alt-F8 to format whole file
nnoremap <M-F8> gg=G<C-O><C-O> 
au FileType c,cpp,javascript,java,cs nnoremap  <buffer> <M-F8>   :call FormatFile()<CR>
au FileType c,cpp,javascript,java,cs noremap   <buffer> <M-F12>  :py3f f:/gnuWin32/bin/clang-format.py3<CR>
au FileType c,cpp,javascript,java,cs inoremap  <buffer> <M-F12>  :py3f f:/gnuWin32/bin/clang-format.py3<CR>
function! FormatFile()
  let l:lines="all" 
  py3f f:/gnuWin32/bin/clang-format.py3
endfunction
" alt-left/right to navigate
nnoremap <M-Left> <C-O>
nnoremap <M-RIGHT> <C-I>
" F9 to source current file
nnoremap <F9> :w<CR>:so %<CR>
inoremap <F9> <ESC>:w<CR>:so %<CR>
" ctrl-tab for switching buffer/window
nnoremap <C-Tab> :bn<CR>
nnoremap <C-F4>  :bd<CR>
" ctrl-s to save file
nnoremap <C-S> :w<CR>
"ctrl-q to toggle comment current line,  see commentary.txt
nnoremap <C-Q> :Commentary<CR>
" ctrl-j join lines withouth space, shift-j join lines with space inserted
nnoremap <C-J> gJ

let mapleader = ","
" show all vim registers
nmap <leader>, :reg<CR>
nmap <leader>re :execute "edit " . $MYVIMRC<CR>
" ,m to maximize window
nmap <leader>m :resize<CR> 
nmap <leader>wm :resize<CR> 
" auto highlight words under cursor, when idle
nmap <leader>z :if AutoHighlightToggle()<Bar>set hls<Bar>endif<CR>
"----------------------------------------- copy current file/path/directory. for example: ",ef" to copy absolute path.
" absolute path  (/something/src/foo.txt) 
nmap <leader>ef :let @*=expand("%:p")<CR> 
" filename       (foo.txt) 
nmap <leader>ee :let @*=expand("%:t")<CR>
" directory name (/something/src)
nmap <leader>ed :let @*=expand("%:p:h")<CR>
" relative path  (src/foo.txt) 
nmap <leader>et :let @*=expand("%")<CR> 
"mru, list recent files
cnoreabbrev <expr> mr 'browse old!'
" Map F10 to display the syntax highlighting group of the current word
nmap <F10> :echom "hi<"     . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
	  \ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
	  \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"
	  \ . " FG:" . synIDattr(synIDtrans(synID(line("."),col("."),1)),"fg#")<CR>
nmap <leader>hh :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<' 
	  \ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<" 
	  \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">" 
	  \ . " FG:" . synIDattr(synIDtrans(synID(line("."),col("."),1)),"fg#")<CR>
" -----------------
"my settings
set cmdheight=2
" -----------------
"commandline key-mapping
"note. now use https://github.com/tpope/vim-rsi

" -----------------
"limit oldfile history to 30
set viminfo='10,<30,s10,h,rV:,rU:,rB:


" ----------------- auto highlight words under cursor
" autocmd CursorMoved * exe printf('match IncSearch /\V\<%s\>/', escape(expand('<cword>'), '/\'))
" ----------------- auto highlight words under cursor, when idle
function! AutoHighlightToggle() " Type <leader>z to toggle highlighting on/off.
  let @/ = ''
  if exists('#auto_highlight')
	au! auto_highlight
	augroup! auto_highlight
	setl updatetime=4000
	echo 'Highlight current word: off'
	return 0
  else
	augroup auto_highlight
	  au!
	  au CursorHold * let @/ = '\V\<'.escape(expand('<cword>'), '\').'\>'
	augroup end
	setl updatetime=650
	echo 'Highlight current word: ON'
	return 1
  endif
endfunction
" ----------------- "for ms-windows, arrow-keys don't leave visaul-mode
if has('win32')
  set keymodel-=stopsel
endif
" ----------------- "virtual block -- when in visual-block-mode, cursors can move beyond eof.
set virtualedit=block

if has('gui_running')
  " ----------------- ease the alt-b buffer menu.
  let no_buffers_menu = 1 
  set guioptions -=T "no tool-bar in gui
  " ----------------- make linespacing narrower 
  set linespace=-1
else
  " colo default
  " highlight LineNr ctermfg=darkgray ctermbg=black
  " highlight CursorLineNr ctermfg=gray ctermbg=black
endif

" ----------------- Plug, Make sure you use single quotes
call plug#begin('$HOME/vimfiles/plugged')
Plug 'mhinz/vim-startify' 
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-rsi'

Plug 'jpalardy/vim-slime', { 'for': 'scheme' }

Plug 'godlygeek/tabular'
Plug 'andymass/vim-matchup'
Plug 'vim-airline/vim-airline'
Plug 'flazz/vim-colorschemes'

Plug 'xolox/vim-misc'
Plug 'xolox/vim-colorscheme-switcher'
Plug 'vim-jp/syntax-vim-ex'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'rhysd/wandbox-vim'
Plug 'thinca/vim-ambicmd'
Plug 'PProvost/vim-ps1'

Plug 'yuttie/comfortable-motion.vim'
if has('nvim')
  Plug 'neovim/nvim-lspconfig'
  Plug 'parsonsmatt/intero-neovim', { 'for': 'haskell' }
  Plug 'neovimhaskell/haskell-vim', { 'for': 'haskell' }
else
endif

"Plug 'preservim/nerdtree'
"Plug 'wlangstroth/vim-racket'
"Plug 'JuliaEditorSupport/julia-vim'
"Plug 'tpope/vim-repeat'
"Plug 'dawikur/algorithm-mnemonics.vim' ", { 'on':  'Algorithm-mnemonics' }
"Plug '0017031/vim-system-copy'

" -----------------------------------------s-expression for lisp/scheme
Plug 'guns/vim-sexp',  { 'for': 'scheme' } 
Plug 'tpope/vim-sexp-mappings-for-regular-people',  { 'for': 'scheme' }
call plug#end()

" for vim-matchup
au FileType c,cpp,java set mps+=<:>

" let g:comfortable_motion_interval = 1000.0/33.0
" let g:comfortable_motion_friction = 50.0
" let g:comfortable_motion_air_drag = 1.0

let g:haskell_enable_quantification = 1   " to enable highlighting of `forall`
let g:haskell_enable_recursivedo = 1      " to enable highlighting of `mdo` and `rec`
let g:haskell_enable_arrowsyntax = 1      " to enable highlighting of `proc`
let g:haskell_enable_pattern_synonyms = 1 " to enable highlighting of `pattern`
let g:haskell_enable_typeroles = 1        " to enable highlighting of type roles
let g:haskell_enable_static_pointers = 1  " to enable highlighting of `static`
let g:haskell_backpack = 1                " to enable highlighting of backpack keywords

let g:slime_target = "neovim"
" let g:system_copy#paste_command='win32yank -o'
" let g:system_copy#copy_command='win32yank -i'
" nmap cc <Plug>SystemCopy
" xmap cc <Plug>SystemCopy
" nmap ccl <Plug>SystemCopyLine
" nmap pp <Plug>SystemPaste
" xmap pp <Plug>SystemPaste
" nmap ppl <Plug>SystemPasteLine

"coc, Map <tab> to trigger completion and navigate to the next item: 
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction
inoremap <silent><expr> <TAB>
	  \ pumvisible() ? "\<C-n>" :
	  \ <SID>check_back_space() ? "\<TAB>" :
	  \ coc#refresh()
" <CR> to confirm completion
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<CR>"

"cnoremap <expr> <Space> ambicmd#expand("\<Space>")


" ----------------- " Help File speedups, <enter> to follow tag, shift-<enter> to go back
" au filetype help nnoremap <buffer> <Tab> /<Bar>\zs\k*\ze<Bar><CR>
au filetype help nnoremap <buffer> <S-Tab> ?<Bar>\zs\k*\ze<Bar><CR>
au filetype help nnoremap <buffer><TAB> /\|\zs\S\{-}\|/<CR> 
au filetype help nnoremap <buffer><CR> <C-]>
au filetype help nnoremap <buffer><S-CR> <C-T>
au filetype help nnoremap <buffer>q :q<CR>
au filetype help set nonumber
set splitbelow " Split windows, ie Help, make more sense to me below
au filetype help wincmd _   " Maximze the help on open


" ----------------- " remap <Esc> in normal mode to also clear hlsearch highlighting
nmap <Esc> <Esc>:nohlsearch<CR>


" ----------------- " remap <Alt-]> to <ctrl-o> (go to older cursor position)
nnoremap <M-]> <C-O>


" ----------------- " remap <ctrl-F4> to :bd (close buffer)
nnoremap <C-F4> :bd<CR>
nnoremap <M-w> :bd<CR>


" ----------------- " remap <ctrl-G> to <ctrl-]> (go to definition)
nnoremap <C-g> <C-]>


" ----------------- " remap <ctrl-v> to (paste from reg *, the system register)
" inoremap <C-v> <C-r> *



" let g:airline_section_c = '%<%F%m %#__accent_red#%{airline#util#wrap(airline#parts#readonly(),0)}%#__restore__#' 

" g/^s*$/d
" :[range]g[lobal]/{pattern}/[cmd]
" Execute the Ex command [cmd] (default ":p") on the
" lines within [range] where {pattern} matches.
" let g:airline_section_c = '%<%F%m %#__accent_red#%{airline#util#wrap(airline#parts#readonly(),0)}%#__restore__#' 

" g/^s*$/d
" :[range]g[lobal]/{pattern}/[cmd]
" Execute the Ex command [cmd] (default ":p") on the
" lines within [range] where {pattern} matches.

" ----------------- "auto indent for perl with perltidy
" if has("autocmd")
"   augroup MyPerlSettings
" 	au!
" 	autocmd filetype perl setlocal equalprg='C:/Users/baic/Downloads/apps/StrawberryPerl/perl/bin/perltidy.bat'
"   augroup END
" endif 

set formatoptions-=ro                                          " Don't insert a " at the start of the new line.
